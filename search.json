[{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e101","dir":"Articles","previous_headings":"","what":"E101","title":"DSL parse errors","text":"found expression neither assignment (<-) stochastic relationship (~) Example:","code":"a + 1"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e102","dir":"Articles","previous_headings":"","what":"E102","title":"DSL parse errors","text":"Invalid left hand side relationship operator (~). Currently left hand side must symbol, though relaxed future support array syntax. However, may use things like numbers function calls left hand side. Example:","code":"1 <- 2 f(x) <- g(y)"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e103","dir":"Articles","previous_headings":"","what":"E103","title":"DSL parse errors","text":"distribution call failed parse. can fail many reasons, details failure come monty::monty_dsl_parse_distribution Example reasons failure include rhs : call (e.g., compare(x) ~ 1 call distribution function (e.g., compare(x) ~ sqrt(2)) invalid call (e.g., compare(x) ~ Normal(0, 1, 2)) details failure included body error message.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e104","dir":"Articles","previous_headings":"","what":"E104","title":"DSL parse errors","text":"Invalid left hand side assignment <-; similar E102.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e201","dir":"Articles","previous_headings":"","what":"E201","title":"DSL parse errors","text":"Duplicated relationships (~). Example: Relationships must unique represents parameter, parameter can’t represented two different distributions.","code":"a ~ Normal(0, 1) b ~ Uniform(0, 1) a ~ Exponential(1) # <= error here"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e202","dir":"Articles","previous_headings":"","what":"E202","title":"DSL parse errors","text":"Duplicated assignments (<-). similar E201 Example: Assignments must unique within DSL code makes straightforward trace usage dependency graph create gradient function using automatic differentiation. restriction means reassign value either, error:","code":"a <- 1 b <- 2 a <- 3 # <= error here a <- 1 b <- 10 a <- a + b # <= error here"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e203","dir":"Articles","previous_headings":"","what":"E203","title":"DSL parse errors","text":"relationship (~) shadowing previous assignment. assigning variable declared symbol refers parameter. Example:","code":"a <- 1 a ~ Normal(0, 1) # <= error here"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e204","dir":"Articles","previous_headings":"","what":"E204","title":"DSL parse errors","text":"assignment (<-) shadowing previous relationship. Example:","code":"a ~ Normal(0, 1) a <- 10"},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e205","dir":"Articles","previous_headings":"","what":"E205","title":"DSL parse errors","text":"Variables used order. using odin big departure - moment must declare expressions (assignments relationships) order. However, forbid multiple assignment may relax future, existing programs changed.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e206","dir":"Articles","previous_headings":"","what":"E206","title":"DSL parse errors","text":"Failed differentiate model. error seen possible differentiate model requested gradient available. functions supported DSL can currently differentiated monty; think , please let us know.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl-errors.html","id":"e207","dir":"Articles","previous_headings":"","what":"E207","title":"DSL parse errors","text":"value fixed shadowed assignment relationship. pass fixed data may used left hand side expression DSL code.","code":""},{"path":"https://mrc-ide.github.io/monty/articles/dsl.html","id":"some-simple-examples","dir":"Articles","previous_headings":"","what":"Some simple examples","title":"Probabilistic DSL","text":"chapter 4 Statistical Rethinking, build regression model height parameters α\\alpha, β\\beta σ\\sigma. can define model prior probability model monty running define new monty_model() object represents prior, bits might need depending want use : model parameters defined order appear definition (alpha first sigma last) can compute domain model: can draw samples model provide monty_rng object can compute (log) density point parameter space computed properties model :","code":"prior <- monty_dsl({   alpha ~ Normal(178, 20)   beta ~ Normal(0, 10)   sigma ~ Uniform(0, 50) }) prior$parameters #> [1] \"alpha\" \"beta\"  \"sigma\" prior$domain #>       [,1] [,2] #> alpha -Inf  Inf #> beta  -Inf  Inf #> sigma    0   50 rng <- monty_rng$new() theta <- prior$direct_sample(rng) theta #> [1] 167.700794  -5.085348   8.899977 prior$density(theta) #> [1] -11.31011 prior$properties #>  #> ── <monty_model_properties> ──────────────────────────────────────────────────── #> • has_gradient: `TRUE` #> • has_direct_sample: `TRUE` #> • is_stochastic: `FALSE` #> • has_parameter_groups: `FALSE` #> • allow_multiple_parameters: `FALSE`"},{"path":"https://mrc-ide.github.io/monty/articles/dsl.html","id":"calculations-in-the-dsl","dir":"Articles","previous_headings":"","what":"Calculations in the DSL","title":"Probabilistic DSL","text":"Sometimes useful perform calculations code; can assignments. trivially, giving names numbers may help make code understandable: can also use things like: c drawn normal distribution mean average b.","code":"m <- monty_dsl({   mu <- 10   sd <- 2   a ~ Normal(mu, sd) }) m <- monty_dsl({   a ~ Normal(0, 1)   b ~ Normal(0, 1)   mu <- (a + b) / 2   c ~ Normal(mu, 1) })"},{"path":"https://mrc-ide.github.io/monty/articles/dsl.html","id":"pass-in-fixed-data","dir":"Articles","previous_headings":"","what":"Pass in fixed data","title":"Probabilistic DSL","text":"can also pass list data values available DSL code. example, first example: Might written Values pass way fixed (hence name!) modified model object created.","code":"prior <- monty_dsl({   alpha ~ Normal(178, 20)   beta ~ Normal(0, 10)   sigma ~ Uniform(0, 50) }) fixed <- list(alpha_mean = 170, alpha_sd = 20,               beta_mean = 0, beta_sd = 10,               sigma_max = 50) prior <- monty_dsl({   alpha ~ Normal(alpha_mean, alpha_sd)   beta ~ Normal(beta_mean, beta_sd)   sigma ~ Uniform(0, sigma_max) }, fixed = fixed)"},{"path":"https://mrc-ide.github.io/monty/articles/monty.html","id":"the-basic-idea","dir":"Articles","previous_headings":"","what":"The basic idea","title":"Introduction to monty","text":"Draw samples model using Markov Chain Monte Carlo methods. need: model: monty_model() object minimally knows names parameter vector (unstructured real-valued vector) can compute log probability density. may also able compute gradient log density, sample directly parameter space (e.g., represents prior distribution). sampler: method drawing samples model’s distribution sequence. define several different sampler types, simplest one monty_sampler_random_walk(), implements simple Metropolis algorithm random walk. runner: controls chains run (e.g., one another parallel). system designed composable; can work Bayesian way defining model representing likelihood another model representing prior pick sampler based capabilities model, pick runner based capabilities computer. monty_model() interface designed flexible user-friendly. expect write higher-level interface help work , describe write wrappers models implemented packages (might write model dust odin adaptor make easy work tools provided monty start making inferences model).","code":""},{"path":"https://mrc-ide.github.io/monty/articles/monty.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"Introduction to monty","text":"starting example, ’s worth noting far better tools model sort thing (stan, bugs, jags, R - really anything). aim section derive simple model may feel familiar. strength package performing inference custom models can’t expressed high level interfaces.  simple likelihood, following model formulation “Statistical Rethinking” chapter 3; height modelled normally distributed departures linear relationship weight. can wrap density function monty_model. data argument “fixed” - ’s part statistical model, ’ll pass fixed argument: construct prior model using monty DSL (vignette(\"dsl\")), using normally distributed priors b, weak uniform prior sigma. posterior distribution combination two models (indicated + ’re adding log-scale, using prior posterior; can use monty_model_combine() prefer). Constructing sensible initial variance-covariance matrix bit trick, using adaptive sampler reduces pain . values chosen reasonable starting points. Now run sampler. ’ve started good starting point make simple sampler converge quickly: don’t aim directly provide tools visualising working samples, well trodden ground packages. However, can directly plot density time:  plots estimated parameters:  coda installed can convert samples coda mcmc.list using coda::.mcmc.list(), posterior installed can convert draws_df using posterior::as_draws_df(), can probably use favourite plotting tools. See vignette(\"samplers\") information.","code":"head(data) #>     height   weight #> 1 162.5401 45.92805 #> 2 159.9566 51.19368 #> 3 156.1808 44.56841 #> 4 168.4164 60.36933 #> 5 158.6978 52.14180 #> 6 154.7666 44.66696 plot(height ~ weight, data) fn <- function(a, b, sigma, data) {   mu <- a + b * data$weight   sum(dnorm(data$height, mu, sigma, log = TRUE)) } likelihood <- monty_model_function(fn, fixed = list(data = data)) likelihood #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 3 parameters: 'a', 'b', and 'sigma' #> ℹ See `?monty_model()` for more information prior <- monty_dsl({   a ~ Normal(178, 100)   b ~ Normal(0, 10)   sigma ~ Uniform(0, 50) }) prior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 3 parameters: 'a', 'b', and 'sigma' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information posterior <- likelihood + prior posterior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 3 parameters: 'a', 'b', and 'sigma' #> ℹ This model: #> • can be directly sampled from #> ℹ See `?monty_model()` for more information vcv <- rbind(c(4.5, -0.088, 0.076),              c(-0.088, 0.0018, -0.0015),              c(0.076, -0.0015, 0.0640)) sampler <- monty_sampler_random_walk(vcv = vcv) samples <- monty_sample(posterior, sampler, 2000, initial = c(114, 0.9, 3),                         n_chains = 4) matplot(samples$density, type = \"l\", lty = 1,         xlab = \"log posterior density\", ylab = \"sample\", col = \"#00000055\") par(mfrow = c(1, 3)) plot(density(samples$pars[\"a\", , ]), main = \"a\") abline(v = 114, col = \"red\") plot(density(samples$pars[\"b\", , ]), main = \"b\") abline(v = 0.9, col = \"red\") plot(density(samples$pars[\"sigma\", , ]), main = \"sigma\") abline(v = 3, col = \"red\")"},{"path":[]},{"path":"https://mrc-ide.github.io/monty/articles/samplers.html","id":"the-bendy-banana","dir":"Articles","previous_headings":"Comparisons","what":"The bendy banana","title":"Samplers","text":"example shows HMC outperforming random walk two dimensional banana-shaped function. model takes two parameters alpha beta, based two successive simple draws, one conditional , β∼Normal(1,0)\\beta \\sim Normal(1,0) α∼Normal(β2,σ)\\alpha \\sim Normal(\\beta^2, \\sigma), σ\\sigma standard deviation conditional draw. include example within package; create model σ=0.5\\sigma = 0.5 can plot visualisation density computing density grid. Normally possible course:  particular case can also easily generate samples, know good sampler produce:  also possible compute 95% confidence interval distribution using relationship standard bivariate normal distribution banana shaped distribution defined . can check roughly 10 samples (200) 95% CI contour.","code":"m <- monty_example(\"banana\", sigma = 0.5) m #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information a <- seq(-2, 6, length.out = 1000) b <- seq(-2, 2, length.out = 1000) z <- outer(a, b, function(alpha, beta) {   exp(monty_model_density(m, rbind(alpha, beta))) }) image(a, b, z, xlab = \"alpha\", ylab = \"beta\") rng <- monty_rng$new() s <- vapply(seq(200), function(x) m$direct_sample(rng), numeric(2)) image(a, b, z, xlab = \"alpha\", ylab = \"beta\") points(s[1, ], s[2, ], pch = 19, col = \"#00000055\") theta <- seq(0, 2 * pi, length.out = 10000) z95 <- local({   sigma <- 0.5   r <- sqrt(qchisq(.95, df = 2))   x <- r * cos(theta)   y <- r * sin(theta)   cbind(x^2 + y * sigma, x) }) image(a, b, z, xlab = \"alpha\", ylab = \"beta\") lines(z95[, 1], z95[, 2]) points(s[1, ], s[2, ], pch = 19, col = \"#00000055\")"},{"path":"https://mrc-ide.github.io/monty/articles/samplers.html","id":"sampling-with-other-samplers","dir":"Articles","previous_headings":"Comparisons","what":"Sampling with other samplers","title":"Samplers","text":"generally possible directly sample density (otherwise MCMC similar methods exist!). cases need use sampler based density available possibly gradient density. can start basic random-walk sampler:  can see great, exhibiting strong random walk behaviour slowly explores surface (1,000 steps). Another way view parameters varying steps: can probably improve samples finding better variance covariance matrix (VCV), single VCV hold well whole surface similar multivariate normal (, appropriate VCV change depending position parameter space) Let’s try Hamiltonian Monte Carlo (HMC) sampler, uses gradient move efficiently parameter space:  viewed steps:  Clearly better!","code":"sampler_rw <- monty_sampler_random_walk(vcv = diag(2) * 0.01) res_rw <- monty_sample(m, sampler_rw, 1000) plot(t(drop(res_rw$pars)), type = \"l\", col = \"#0000ff66\",      xlim = range(a), ylim = range(b)) lines(z95[, 1], z95[, 2]) matplot(t(drop(res_rw$pars)), lty = 1, type = \"l\", col = c(2, 4),         xlab = \"Step\", ylab = \"Value\") sampler_hmc <- monty_sampler_hmc(epsilon = 0.1, n_integration_steps = 10) res_hmc <- monty_sample(m, sampler_hmc, 1000) plot(t(drop(res_hmc$pars)), type = \"l\", col = \"#0000ff33\",      xlim = range(a), ylim = range(b)) lines(z95[, 1], z95[, 2]) matplot(t(drop(res_hmc$pars)), lty = 1, type = \"l\", col = c(2, 4),         xlab = \"Step\", ylab = \"Value\")"},{"path":"https://mrc-ide.github.io/monty/articles/samples.html","id":"the-structure-of-monty-samples","dir":"Articles","previous_headings":"","what":"The structure of monty samples","title":"Working with samples","text":"samplers runners produce samples basic structure. structure documented () free use structure want just dive manipulate things. Please treat output read-; extract data want, make copy don’t change value within samples structure going pass back monty function, assume modified. , samples poorly mixed result samples 2 parameters, 2000 samples, 4 chains. result running monty_sample() banana model vignette(\"samplers\"), class monty_samples. monty_samples object contains element pars contains sampled parameters","code":"samples #>  #> ── <monty_samples: 2 parameters x 2000 samples x 4 chains> ───────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ! posterior::as_draws_array() [package installed, but not loaded] #> → ! posterior::as_draws_df() [package installed, but not loaded] #> → ! coda::as.mcmc.list() [package installed, but not loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information dim(samples$pars) #> [1]    2 2000    4"},{"path":"https://mrc-ide.github.io/monty/articles/samples.html","id":"conversion-to-posteriors-draw-objects","dir":"Articles","previous_headings":"The structure of monty samples","what":"Conversion to posterior’s draw objects","title":"Working with samples","text":"implement methods posterior::as_draws_array posterior::as_draws_df, can use convert formats might familiar use statistical packages. preserves parameters ($pars) . , can access summary methods already implemented elsewhere: objects able use plotting functions bayesplot, example, MCMC visual diagnostics, without much trouble. also support conversion draws_array; let us know need conversion functions (as_draws_list, as_draws_rvars, as_draws_matrix).","code":"samples_df <- posterior::as_draws_df(samples) posterior::summarise_draws(samples_df) #> # A tibble: 2 × 10 #>   variable  mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 alpha    2.27   0.645  3.06  1.39 -0.612  7.73  1.85     5.79     43.5 #> 2 beta     0.608  0.364  1.39  1.02 -2.05   2.78  2.10     5.32     11.7"},{"path":"https://mrc-ide.github.io/monty/articles/samples.html","id":"conversion-to-codas-mcmc-list-objects","dir":"Articles","previous_headings":"The structure of monty samples","what":"Conversion to coda’s mcmc.list objects","title":"Working with samples","text":"coda package utilities working MCMC, many packages compatible mcmc.list object type (e.g., ggmcmc package). provide method coda’s .mcmc.list, package available:","code":"samples_coda <- coda::as.mcmc.list(samples) coda::effectiveSize(samples_coda) #>    alpha     beta  #> 39.92519 68.47306"},{"path":"https://mrc-ide.github.io/monty/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rich FitzJohn. Author, maintainer. Wes Hinsley. Author. Ed Knock. Author. Marc Baguelin. Author. Imperial College Science, Technology Medicine. Copyright holder.","code":""},{"path":"https://mrc-ide.github.io/monty/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"FitzJohn R, Hinsley W, Knock E, Baguelin M (2024). monty: Monte Carlo Models. R package version 0.2.12, https://github.com/mrc-ide/monty, https://mrc-ide.github.io/monty.","code":"@Manual{,   title = {monty: Monte Carlo Models},   author = {Rich FitzJohn and Wes Hinsley and Ed Knock and Marc Baguelin},   year = {2024},   note = {R package version 0.2.12, https://github.com/mrc-ide/monty},   url = {https://mrc-ide.github.io/monty}, }"},{"path":"https://mrc-ide.github.io/monty/index.html","id":"monty","dir":"","previous_headings":"","what":"Monte Carlo Models","title":"Monte Carlo Models","text":"monty toolbox Monte Carlo methods. designed help run MCMC models fit closely within paradigms packages stan - example likelihood written hand. See package vignette basic introduction. package early, though rapid, stage development guarantee interfaces change (fact, can guarantee really). However core concepts now solidified. core package built around basic ideas: statistical model like draw samples using MCMC (monty::monty_sample) can choose different samplers depending properties model can specify priors model high-level DSL can power stochastic models fast, parallelisable, random number generator, use R C++","code":""},{"path":"https://mrc-ide.github.io/monty/index.html","id":"related-tools","dir":"","previous_headings":"","what":"Related tools","title":"Monte Carlo Models","text":"monty complete rewrite ideas mcstate, though bits mcstate moved dust2. dust2 package provides machinery run particle filters sequential Monte Carlo methods using random number support monty can create statistical models can used monty’s samplers odin2 package can generate dynamical models use monty’s random number generators can used part dust2 particle filter. odin2 DSL monty DSL closely related.","code":""},{"path":"https://mrc-ide.github.io/monty/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Monte Carlo Models","text":"basic functionality package place, plan work : improving debugging tools models fail mid-chain implementing parallel tempering, allowing compose supported sampler improving support nested models improving expanding DSL","code":""},{"path":"https://mrc-ide.github.io/monty/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo Models","text":"Please install r-universe: prefer, can install GitHub remotes:","code":"install.packages(   \"monty\",   repos = c(\"https://mrc-ide.r-universe.dev\", \"https://cloud.r-project.org\")) remotes::install_github(\"mrc-ide/monty\", upgrade = FALSE)"},{"path":"https://mrc-ide.github.io/monty/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Monte Carlo Models","text":"MIT © Imperial College Science, Technology Medicine","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate expressions — monty_differentiation","title":"Differentiate expressions — monty_differentiation","text":"Differentiate expressions monty DSL.  function exported advanced use, really can use odin.  potential generally useful, tweak interface quite lot next fine use can handle disruption.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate expressions — monty_differentiation","text":"","code":"monty_differentiation()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate expressions — monty_differentiation","text":"list related objects: differentiate: function can differentiate expression respect variable (string). maths: mathematical utilities constructing expressions.  documented later, useful bits function elements times, plus plus_fold. expand soon advertise functions able differentiate allow programs fail fast.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate expressions — monty_differentiation","text":"R already support differentiating expressions using D, useful creating derivatives simple functions pass non-linear optimisation.  need something bit flexible differentiating models monty DSL (monty_dsl) also related odin DSL.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"differences-to-d-","dir":"Reference","previous_headings":"","what":"Differences to D()","title":"Differentiate expressions — monty_differentiation","text":"try little harder simplify expressions. distribution functions monty DSL (e.g., Poisson) () handled specially, allowing substitution log-densities expectations. support array expressions, able differentiate .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"roadmap","dir":"Reference","previous_headings":"","what":"Roadmap","title":"Differentiate expressions — monty_differentiation","text":"may need make slightly extensible future, now set functions can differentiated closed.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Differentiate expressions — monty_differentiation","text":"way accessing distribution support peculiar return type unusual.  intentional, expect conventional interface future package settles .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_differentiation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate expressions — monty_differentiation","text":"","code":"d <- monty_differentiation() d$differentiate(quote(sqrt(sin(x))), \"x\") #> cos(x)/(2 * sqrt(sin(x))) D(quote(sqrt(sin(x))), \"x\") #> 0.5 * (cos(x) * sin(x)^-0.5)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand (and check) domain against a packer — monty_domain_expand","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"Check expand domain, used alongside monty_packer object.  can used expand domains logical parameters (e.g. vector b) specific names (e.g., b[1], b[2], etc) without rely internals names constructed.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"","code":"monty_domain_expand(domain, packer)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"domain two-column matrix defined monty_model, row names corresponding either logical names (e.g., b) specific names b[1] present packer. NULL allowed parameters defined entire real line. packer monty_packer object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"two dimensional matrix representing domain, NULL domain given NULL.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_domain_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand (and check) domain against a packer — monty_domain_expand","text":"","code":"packer <- monty_packer(c(\"a\", \"b\"), list(x = 3, y = c(2, 2))) monty_domain_expand(NULL, packer) #> NULL monty_domain_expand(rbind(x = c(0, 1)), packer) #>      [,1] [,2] #> x[1]    0    1 #> x[2]    0    1 #> x[3]    0    1 monty_domain_expand(rbind(x = c(0, 1), \"x[2]\" = c(0, Inf)), packer) #>      [,1] [,2] #> x[1]    0    1 #> x[2]    0  Inf #> x[3]    0    1 monty_domain_expand(rbind(x = c(0, 1), \"y\" = c(0, Inf)), packer) #>        [,1] [,2] #> x[1]      0    1 #> x[2]      0    1 #> x[3]      0    1 #> y[1,1]    0  Inf #> y[2,1]    0  Inf #> y[1,2]    0  Inf #> y[2,2]    0  Inf"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Specific Language for monty — monty_dsl","title":"Domain Specific Language for monty — monty_dsl","text":"Create model using monty DSL; function likely change name future, interface.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Specific Language for monty — monty_dsl","text":"","code":"monty_dsl(x, type = NULL, gradient = NULL, fixed = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Specific Language for monty — monty_dsl","text":"x model expression.  may given expression, string, path filename.  Typically, reasonable job working provided use type argument disambiguate force particular interpretation.  argument uses rlang's quosures allow work expressions directly; see examples details. type Force interpretation type expression given x.  given, valid options expression, text file. gradient Control gradient derivation.  NULL (default) try generate gradient function model warn possible.  FALSE, attempt construct gradient function, prevents warning generated possible.  TRUE, error possible create gradient function. fixed optional list values can used within DSL code.  Anything provide available calculations.  interest future compatibility, check currently elements scalars.  future may become flexible allow passing environments, etc.  provided, values changed without rebuilding model; fixed data.  might use hyperparameters fixed across set model runs, example.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domain Specific Language for monty — monty_dsl","text":"monty_model object derived expressions provide.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Specific Language for monty — monty_dsl","text":"","code":"# Expressions that define models can be passed in with no quoting monty_dsl(a ~ Normal(0, 1)) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 1 parameter: 'a' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information monty_dsl({   a ~ Normal(0, 1)   b ~ Exponential(1) }) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'a' and 'b' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information  # You can also pass strings monty_dsl(\"a ~ Normal(0, 1)\") #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 1 parameter: 'a' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about supported distributions — monty_dsl_distributions","title":"Information about supported distributions — monty_dsl_distributions","text":"Report information supported distributions DSL.  primarily intended use packages use monty_dsl_parse_distribution, function reports information distributions arguments succeed .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about supported distributions — monty_dsl_distributions","text":"","code":"monty_dsl_distributions()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information about supported distributions — monty_dsl_distributions","text":"data.frame columns name name distribution; name begins capital letter, duplicate names different parameterisations supported. args arguments parameters, except random variable given first argument density functions. may expand output future include information distributions support C++, might end supporting everything way soon.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about supported distributions — monty_dsl_distributions","text":"","code":"monty_dsl_distributions() #>              name         args #> 1            Beta         a, b #> 2        Binomial   size, prob #> 3     Exponential         rate #> 4     Exponential         mean #> 5           Gamma  shape, rate #> 6           Gamma shape, scale #> 7  Hypergeometric      m, n, k #> 8          Normal     mean, sd #> 9         Poisson       lambda #> 10        Uniform     min, max"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain monty error — monty_dsl_error_explain","title":"Explain monty error — monty_dsl_error_explain","text":"Explain error codes produced monty.  work progress, like feedback useful improve . idea see error can link get information means resolve .  current implementation send rendered vignettes, future arrange offline rendering .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain monty error — monty_dsl_error_explain","text":"","code":"monty_dsl_error_explain(code, how = \"pretty\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain monty error — monty_dsl_error_explain","text":"code error code, string, form Exxx (capital \"E\" followed three numbers) explain error. Options pretty (render pretty text console), plain (display plain text console) link (browse online help).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain monty error — monty_dsl_error_explain","text":"Nothing, called side effect ","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_error_explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain monty error — monty_dsl_error_explain","text":"","code":"monty_dsl_error_explain(\"E201\") #>  #> ── E201 ──────────────────────────────────────────────────────────────────────── #> Duplicated relationships (with `~`). #>  #> Example: #>  #>     a ~ Normal(0, 1) #>     b ~ Uniform(0, 1) #>     a ~ Exponential(1) # <= error here #>  #> Relationships must be unique because each represents a parameter, and a #> parameter can't be represented by two different distributions. #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse distribution expression — monty_dsl_parse_distribution","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"Parse expression call one monty's distribution functions (e.g., Normal, Poisson).  fill defaults, disambiguate multiple parameterisations distribution available, provide links C++ API.  function designed use packages use monty, unlikely useful users.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"","code":"monty_dsl_parse_distribution(expr, name = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"expr expression name Name expression, used constructing messages can use errors.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"list; contents subject change. However can (degree) rely following elements: name: name distribution (e.g., Normal).  name function called expr variant: name distribution variant, one supported. args: arguments provided, position-matched order cpp: names C++ entrypoint use.  list elements density sample log-density sampling functions, NULL yet exist. Currently also include: density: function compute log-density.  likely change support creation differentiable models want something arguments provided! sample: function sample distribution, given (first argument) rng object (see monty_rng)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_dsl_parse_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse distribution expression — monty_dsl_parse_distribution","text":"","code":"# A successful match monty_dsl_parse_distribution(quote(Normal(0, 1))) #> $success #> [1] TRUE #>  #> $value #> $value$name #> [1] \"Normal\" #>  #> $value$variant #> NULL #>  #> $value$args #> $value$args[[1]] #> [1] 0 #>  #> $value$args[[2]] #> [1] 1 #>  #>  #> $value$density #> function (x, mean, sd)  #> dnorm(x, mean, sd, log = TRUE) #> <bytecode: 0x55ebb6909ca0> #> <environment: namespace:monty> #>  #> $value$domain #> [1] -Inf  Inf #>  #> $value$sample #> function (rng, mean, sd)  #> rng$normal(1, mean, sd) #> <bytecode: 0x55ebb69098e8> #> <environment: namespace:monty> #>  #> $value$expr #> $value$expr$density #> -(x - mean)^2/(2 * sd^2) - log(2 * pi)/2 - log(sd) #>  #> $value$expr$mean #> mean #>  #>  #> $value$cpp #> $value$cpp$density #> [1] \"normal\" #>  #> $value$cpp$sample #> [1] \"normal\" #>  #>  #>   # An unsuccessful match monty_dsl_parse_distribution(quote(Normal())) #> $success #> [1] FALSE #>  #> $error #>                                                                       x  #>        \"Invalid call to 'Normal()'\" \"Failed to match given arguments: \"  #>                                   i                                   *  #>                \"Call should match:\"                          \"mean, sd\"  #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example models — monty_example","title":"Example models — monty_example","text":"Load example models monty.  models exist can create (hopefully) interesting examples documentation without becoming overwhelming.  probably use anything exploring package.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example models — monty_example","text":"","code":"monty_example(name, ...)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example models — monty_example","text":"name Name example, string.  See Details supported models. ... Optional parameters passed create model.  models can created additional parameters, can tweak behaviour passing named parameters .  See Details.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example models — monty_example","text":"monty_model object","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"bananna","dir":"Reference","previous_headings":"","what":"bananna","title":"Example models — monty_example","text":"banana model two-dimensional banana-shaped function, picked quite annoying sample directly.  model two parameters alpha beta based two successive draws, one conditional . can vary sigma model creation, default 0.5","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"gaussian","dir":"Reference","previous_headings":"","what":"Gaussian","title":"Example models — monty_example","text":"multivariate Gaussian centred origin.  Takes variance-covariance-matrix argument.  Parameters letters , b, ... number dimensions.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example models — monty_example","text":"","code":"monty_example(\"banana\") #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information monty_example(\"gaussian\", diag(2)) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'a' and 'b' #> ℹ This model: #> • can compute gradients #> • can be directly sampled from #> ℹ See `?monty_model()` for more information"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create basic model — monty_model","title":"Create basic model — monty_model","text":"Create basic monty model.  takes user-supplied object minimally can compute probability density (via density function) information parameters; can sample model using MCMC using monty_sample.  imagine many users call function directly, glue used packages.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create basic model — monty_model","text":"","code":"monty_model(model, properties = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create basic model — monty_model","text":"model list environment elements described Details. properties Optionally, monty_model_properties object, used enforce clarify properties model.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create basic model — monty_model","text":"object class monty_model.  elements: model: model provided parameters: parameter name vector parameter_groups: parameter groups domain: parameter domain matrix, named parameters direct_sample: direct_sample function, provided model gradient: gradient function, provided model properties: list properties model; see monty_model_properties().  Currently contains: has_gradient: model can compute gradient has_direct_sample: model can sample parameters space is_stochastic: model behave stochastically has_parameter_groups: model separable parameter groups","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create basic model — monty_model","text":"model argument can list environment (something indexable $) elements: density: function compute probability density.  must take argument representing parameter vector (numeric vector) return single value.  posterior probability density Bayesian inference, anything really.  Models can return -Inf things impossible, try cope gracefully wherever possible.  property allow_multiple_parameters TRUE, function must able handle argument parameter matrix,  return vector densities. parameters: character vector parameter names.  vector source truth length parameter vector. domain: Information parameter domain.  two column matrix length(parameters) rows representing parameter.  parameter minimum maximum bounds given first second column.  Infinite values (-Inf Inf) used parameter infinite domain .  Currently used translate bounded unbounded space HMC, might also use reflecting proposals MCMC , well fast way avoiding calculating densities proposals fall bounds.  present assume model valid everywhere (.e., parameters valid -Inf Inf.  unnamed, must provide domain parameters.  named, can provide subset, parameters included assumed domain (-Inf, Inf). direct_sample: function sample directly parameter space, given monty_rng object sample . case model returns posterior (e.g., Bayesian inference), assumed sampling prior. use generating initial conditions MCMC given, possibly uses.  given using monty_sample() user provide vector initial states. gradient: function compute gradient density respect parameter vector; takes parameter vector returns vector length.  efficiency, model may want stateful gradients can efficiently calculated density calculation, density gradient, called parameters.  function optional (may well defined possible define). set_rng_state: function set state (contrast rng passed direct_sample sampler's rng stream, assume models look stream, may need many streams).  Models provide method assumed stochastic; however, can use is_stochastic property (via monty_model_properties()) override (e.g., run stochastic model deterministic expectation). function takes raw vector random number state monty_rng uses set random number state model; derived random number stream particular chain, jumped ahead. get_rng_state: function get RNG state; must provided set_rng_state present.  Must return random number state, raw vector (potentially quite long). parameter_groups: Optionally, integer vector indicating parameter group membership.  format may change (especially explore complex nestings) present parameters group 0 affect everything (accepted rejected whole), parameters groups 1 n independent (example, changing parameters group 2 affect density parameters proposed group 3).","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two models — monty_model_combine","title":"Combine two models — monty_model_combine","text":"Combine two models multiplication.  need better name .  Bayesian inference want create model represents multiplication likelihood prior (log space) convenient think models separately.  Multiplying probabilities (adding log scale) common enough may situations want .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two models — monty_model_combine","text":"","code":"monty_model_combine(a, b, properties = NULL, name_a = \"a\", name_b = \"b\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two models — monty_model_combine","text":"first model b second model properties monty_model_properties object, used control (enforce) properties combined model. name_a Name first model (defaulting ''); can use make error messages nicer read, practical effect. name_b Name first model (defaulting 'b'); can use make error messages nicer read, practical effect.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two models — monty_model_combine","text":"monty_model object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine two models — monty_model_combine","text":"describe impact combining pair models density: sum log densities model parameters: union parameters model taken domain: restrictive domain taken parameter.  Parameters appear one model assumed infinite domain . gradient: models define gradient, sum gradients.  either define gradient, resulting model gradient support.  Set has_gradient = TRUE within `properties want enforce combination differentiable.  models disagree parameters, parameters missing model assumed (reasonably) zero gradient. direct_sample: one hard right thing .  neither model can directly sampled fine, directly sample.  one model can sampled can sample union parameters take function (case prior model combined likelihood).  cases errors, can avoided setting has_direct_gradient = FALSE properties. is_stochastic: model stochastic either component stochastic. properties model combined , reflecting properties joint model. model field ordered, unnamed, list containing two elements corresponding first second model (monty_model, underlying model, perhaps?).  part makes distinction two models ; components equivalent.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two models — monty_model_combine","text":"","code":"# A simple example; a model that contains something of interest, # and a simple prior from monty_dsl likelihood <- monty_example(\"banana\") prior <- monty_dsl({   alpha ~ Normal(0, 1)   beta ~ Normal(0, 10) }) posterior <- likelihood + prior posterior #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> ℹ See `?monty_model()` for more information  # The same thing, more explicitly: monty_model_combine(likelihood, prior) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ This model: #> • can compute gradients #> ℹ See `?monty_model()` for more information  # Control properties of the combined model: monty_model_combine(likelihood, prior,                     monty_model_properties(has_gradient = FALSE)) #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'alpha' and 'beta' #> ℹ See `?monty_model()` for more information"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log density — monty_model_density","title":"Compute log density — monty_model_density","text":"Compute log density model.  wrapper around $density property within monty_model object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log density — monty_model_density","text":"","code":"monty_model_density(model, parameters)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log density — monty_model_density","text":"model monty_model object parameters vector matrix parameters","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log density — monty_model_density","text":"log-density value, vector log-density values","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute log density — monty_model_density","text":"","code":"m <- monty_model_function(function(a, b) dnorm(0, a, b, log = TRUE)) monty_model_density(m, c(0, 1)) #> [1] -0.9189385 monty_model_density(m, c(0, 10)) #> [1] -3.221524"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Directly sample from a model — monty_model_direct_sample","title":"Directly sample from a model — monty_model_direct_sample","text":"Directly sample model.  models support , error thrown possible.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Directly sample from a model — monty_model_direct_sample","text":"","code":"monty_model_direct_sample(model, rng, named = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Directly sample from a model — monty_model_direct_sample","text":"model monty_model object rng Random number state, created monty_rng.  Use RNG one stream may may work expected; something need tidy (mrc-5292) named Logical, indicating output named using parameter names.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Directly sample from a model — monty_model_direct_sample","text":"vector matrix sampled parameters","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_direct_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Directly sample from a model — monty_model_direct_sample","text":"","code":"m <- monty_example(\"banana\")  r <- monty_rng$new() monty_model_direct_sample(m, r) #> [1]  0.01091672 -0.51496028 monty_model_direct_sample(m, r, named = TRUE) #>      alpha       beta  #>  0.4310525 -0.2160027   r <- monty_rng$new(n_streams = 3) monty_model_direct_sample(m, r) #>            [,1]     [,2]      [,3] #> [1,]  0.2147504 1.207777 -1.095091 #> [2,] -0.5453002 1.268223  0.113292 monty_model_direct_sample(m, r, named = TRUE) #>             [,1]       [,2]       [,3] #> alpha -0.5961543 -0.4538435 -0.1738595 #> beta   0.3813224  0.5014159 -0.7288189"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create monty_model from a function computing density — monty_model_function","title":"Create monty_model from a function computing density — monty_model_function","text":"Create monty_model function computes density. allows use R function simple monty model.  need advanced model features, interface may suit may prefer use monty_model directly.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create monty_model from a function computing density — monty_model_function","text":"","code":"monty_model_function(density, packer = NULL, fixed = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create monty_model from a function computing density — monty_model_function","text":"density function compute log density.  can take number parameters packer Optionally, monty_packer object control function parameters packed numeric vector.  can typically omit arguments functions present numeric vector scalars. fixed Optionally, named list fixed values substitute call density.  used conjunction packer (use fixed argument monty_packer instead).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create monty_model from a function computing density — monty_model_function","text":"monty_model object computes log density provided density function, given numeric vector argument representing parameters.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create monty_model from a function computing density — monty_model_function","text":"interface expand future versions monty support gradients, stochastic models, parameter groups simultaneous calculation density.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create monty_model from a function computing density — monty_model_function","text":"","code":"banana <- function(a, b, sd) {   dnorm(b, log = TRUE) + dnorm((a - b^2) / sd, log = TRUE) } m <- monty_model_function(banana, fixed = list(sd = 0.25)) m #>  #> ── <monty_model> ─────────────────────────────────────────────────────────────── #> ℹ Model has 2 parameters: 'a' and 'b' #> ℹ See `?monty_model()` for more information  # Density from our new model. Note that this computes density # using an unstructured parameter vector, which is mapped to 'a' # and 'b': monty_model_density(m, c(0, 0)) #> [1] -1.837877  # Same as the built-in banana example: monty_model_density(monty_example(\"banana\"), c(0, 0)) #> [1] -1.837877"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute gradient of log density — monty_model_gradient","title":"Compute gradient of log density — monty_model_gradient","text":"Compute gradient log density (returned monty_model_density) respect parameters.  models support , error thrown possible.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute gradient of log density — monty_model_gradient","text":"","code":"monty_model_gradient(model, parameters, named = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute gradient of log density — monty_model_gradient","text":"model monty_model object parameters vector matrix parameters named Logical, indicating output named using parameter names.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute gradient of log density — monty_model_gradient","text":"vector matrix gradients","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute gradient of log density — monty_model_gradient","text":"","code":"m <- monty_example(\"banana\") # Global maximum at (0, 0), and gradient is zero there: monty_model_density(m, c(0, 0)) #> [1] -1.837877 monty_model_gradient(m, c(0, 0)) #> [1] 0 0  # Nonzero gradient away from the origin: monty_model_gradient(m, c(0.4, 0.2)) #> [1] -1.440  0.376"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe model properties — monty_model_properties","title":"Describe model properties — monty_model_properties","text":"Describe properties model.  Use function optional, can pass return value properties argument monty_model enforce model actually properties.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe model properties — monty_model_properties","text":"","code":"monty_model_properties(   has_gradient = NULL,   has_direct_sample = NULL,   is_stochastic = NULL,   has_parameter_groups = NULL,   allow_multiple_parameters = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe model properties — monty_model_properties","text":"has_gradient Logical, indicating model gradient method.  Use NULL (default) detect model. has_direct_sample Logical, indicating model direct_sample method.  Use NULL (default) detect model. is_stochastic Logical, indicating model stochastic.  Stochastic models must supply set_rng_state get_rng_state methods. has_parameter_groups Logical, indicating model can decomposed parameter groups independent .  indicated using parameter_groups field within model object passed monty_model, presence by_group argument density (later may also support gradient).  Use NULL (default) detect model. allow_multiple_parameters Logical, indicating density calculation can support passed matrix parameters (column corresponding different parameter set) return vector densities.  FALSE, support different approaches sort feature needed.  detected model, default FALSE always straightforward implement.  However, possible may much efficient (via vectorisation parallelisation) .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe model properties — monty_model_properties","text":"list class monty_model_properties modified.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_model_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Describe model properties — monty_model_properties","text":"","code":"# Default properties: monty_model_properties() #>  #> ── <monty_model_properties> ──────────────────────────────────────────────────── #> • allow_multiple_parameters: `FALSE` #> ℹ Unset: 'has_gradient', 'has_direct_sample', 'is_stochastic', and 'has_parameter_groups'  # Set some properties: monty_model_properties(has_gradient = TRUE, is_stochastic = FALSE) #>  #> ── <monty_model_properties> ──────────────────────────────────────────────────── #> • has_gradient: `TRUE` #> • is_stochastic: `FALSE` #> • allow_multiple_parameters: `FALSE` #> ℹ Unset: 'has_direct_sample' and 'has_parameter_groups'"},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create observer — monty_observer","title":"Create observer — monty_observer","text":"Create observer extract additional details model sampling process.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create observer — monty_observer","text":"","code":"monty_observer(observe, finalise = NULL, combine = NULL, append = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create observer — monty_observer","text":"observe function run arguments model (model passed monty_model) rng (rng object).  function return list.  best list returned named, duplicated names, return values exact dimensions every iteration.  , provide following arguments, going hard describe worse implement. finalise function runs single chain run, use simplify across samples drawn chain.  Takes single argument list one set observations per sample. combine function runs chains run, use simplify across chains.  Takes single argument, list one set observations per chain. append function runs continuation chain run (via monty_sample_continue.  Takes two arguments representing fully simplified observations first second chains.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create observer — monty_observer","text":"object class monty_observer can passed monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_observer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create observer — monty_observer","text":"Sometimes want extract additional information model chain runs.  case see running MCMC particle filter (pmcmc); case likelihood calculation running computing lots interesting quantities final state system (required onward simulation) filtered trajectories time.  stochastic even just rerun model sampled parameter sets, final states recovered depend also random number generators (practically want , quite expensive compute quantities). observer mechanism allows carry arbitrary additional calculations model end step.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a parameter packer — monty_packer","title":"Build a parameter packer — monty_packer","text":"Build parameter packer, can used models translate unstructured vector numbers (vector updated MCMC example) structured list named values, easier program .  refer process taking named list scalars, vectors arrays converting single vector \"packing\" inverse \"unpacking\".","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a parameter packer — monty_packer","text":"","code":"monty_packer(scalar = NULL, array = NULL, fixed = NULL, process = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a parameter packer — monty_packer","text":"scalar Names scalar parameters.  similar listing elements array values 1, though elements scalar placed ahead listed array within final parameter vector, elements array generated names include square brackets. array list, names correspond names array parameters values correspond lengths parameters. Multiple dimensions allowed (provide element two entries represent dimensions matrix). Zero-length integer vectors NULL values counted scalars, allows put scalars positions front packing vector. future, may able use strings values lengths, case looked within fixed. fixed named list fixed parameters; added final list directly.  typically represent additional pieces data model needs run, performing inference . process arbitrary R function passed final assembled parameter list; may create additional entries, concatenated onto original list.  use take care return values names entries listed scalar, array fixed, error (pack() broken).  likely play around process future order get automatic differentiation work.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a parameter packer — monty_packer","text":"object class monty_packer, three elements: parameters: character vector computed parameter names; names statistical model use. unpack: function can unpack unstructured vector (say, statistical model parameters) structured list (say, generative model) pack: function can pack structured list parameters back numeric vector suitable statistical model.  ignores values created preprocess function. index: function produces named list element name value parameters value indices within unstructured vector values can found.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a parameter packer — monty_packer","text":"several places convenient work unstructured vector: MCMC typically discussed updating vector x another x' optimisation algorithm try find set values vector x minimises (maximises) function f(x) ode solver works vector x(t) (x time t) considers x(t + h) computing vector derivatives dx(t)/dt cases, algorithm needs vector numbers knows nothing represent.  Commonly, packed vector parameters.  vector x might actually represent parameters , b c vector [, b, c] - common pattern, probably implemented . complex settings, might want vector x collect structured quantities.  Suppose fitting model age-structured sex-structured parameter.  Rather series scalars packed vector x might series values destined treated vector:   might vector length 7, first three elements represent scalar values , b c next four vector d. Unpacked, might written :   machinery designed make transformations simple standardised within monty, flexible enough many situations.  also use within dust2 odin2 transformations vectors ODE state.","code":"| 1  2  3  4  5  6  7  | | a  b  c  d1 d2 d3 d4 | list(a = 1, b = 2, c = 3, d = 4:7)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"when-to-use-process","dir":"Reference","previous_headings":"","what":"When to use process","title":"Build a parameter packer — monty_packer","text":"process function get---jail function designed let arbitrary transformations unpacking vector.  general, first choice use less easy reason tooling (example, develop automatic differentiation support use HMC algorithm, process function problematic need make sure can differentiate process). However, cases way achieve results. Imagine packing 2x2 covariance matrix vector order use within MCMC optimisation algorithm. Ultimately, unpacked vector need hold four elements (b11, b12, b21, b22), three distinct values two -diagonal elements (.e., b12 == b21).  might write passing b_raw = 3 array, unpacked list holds b_raw = c(b11, b12, b22).  write process something like:   creates symmetric 2x2 matrix b b_raw.","code":"process <- function(x) {   list(b = matrix(x$b_raw[c(1, 2, 2, 3)], 2, 2)) }"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"unpacking-matrices","dir":"Reference","previous_headings":"","what":"Unpacking matrices","title":"Build a parameter packer — monty_packer","text":"use fixed process defining packer, can use $unpack() matrix higher-dimensional output.  two ways might like unpack sort output.  Assume matrix m 3 rows 2 columns; means two sets parameters state (one per column) 3 states within ; format MCMC parameters example. first return list ith element result unpacking ith parameter/state vector.  can running   second return named list three elements ith element unpacked version ith state.  case can pass matrix directly unpacker:   , elements m acquire additional dimension; scalars become vectors (one per set), vectors become matrices (one column per set) . approach generalises higher dimensional input, though suspect spend bit time head-scratching use .","code":"apply(m, 2, p$unpack) p$unpack(m)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"packing-lists-into-vectors-and-matrices","dir":"Reference","previous_headings":"","what":"Packing lists into vectors and matrices","title":"Build a parameter packer — monty_packer","text":"unpacking operation common - MCMC proceeds, produces unstructured vector, unpack list order able easily work .  reverse much less common, take list convert vector (matrix, multidimensional array).  Use direction (\"packing\") may common using packers work output state-space models (e.g. odin2 dust2, use machinery). input pack() shape unpack() returned; named list numerical vectors, matrices arrays.  names must correspond names packer (.e., scalar names array).  element dimensions   ...object dimensions data ...residual dimensions hypothetical input pack. unfortunate ambiguity R's lack true scalar types avoid.  hard tell difference packing vector vs packing array dimensions 1.  See examples, please let us know behaviour needs changing.","code":"<...object, ...residual>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_packer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a parameter packer — monty_packer","text":"","code":"# Here's a really simple example p <- monty_packer(c(\"a\", \"b\", \"c\")) p #>  #> ── <monty_packer> ────────────────────────────────────────────────────────────── #> ℹ Packing 3 parameters: 'a', 'b', and 'c' #> ℹ Use '$pack()' to convert from a list to a vector #> ℹ Use '$unpack()' to convert from a vector to a list #> ℹ See `?monty_packer()` for more information  p$pack(list(a = 1, b = 2, c = 3)) #> [1] 1 2 3 p$unpack(1:3) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>   # Sometimes we have a vector embedded in our parameters: p <- monty_packer(c(\"a\", \"b\"), list(v = 4)) p$pack(list(a = 1, b = 2, v = c(6, 7, 8, 9))) #> [1] 1 2 6 7 8 9 p$unpack(c(1, 2, 6, 7, 8, 9)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $v #> [1] 6 7 8 9 #>   # Or a higher dimensional structure such as a matrix: p <- monty_packer(c(\"a\", \"b\"), list(m = c(2, 2))) p$unpack(c(1, 2, 6, 7, 8, 9)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $m #>      [,1] [,2] #> [1,]    6    8 #> [2,]    7    9 #>   # You can use a packer to set \"fixed\" parameters that do not vary # with the underlying model being fit, but are required by your model. # This is simpler than the \"closure\" approach used previously in our # mcstate package and also easier to accommodate with differentiable # models: p <- monty_packer(   c(\"a\", \"b\"),   fixed = list(d = data.frame(n = 1:3, m = runif(3)))) p$unpack(1:2) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $d #>   n           m #> 1 1 0.600760886 #> 2 2 0.157208442 #> 3 3 0.007399441 #>  p$pack(p$unpack(1:2)) #> [1] 1 2  # The example from above, where we create a symmetric 2 x 2 matrix # from a 3-element vector, alongside a scalar: p <- monty_packer(   scalar = \"a\",   array = list(b_flat = 3),   process = function(p) list(b = matrix(p$b_flat[c(1, 2, 2, 3)], 2, 2)))  # Unpacking we see \"b_flat\" is still in the list, but \"b\" is our # symmetric matrix: p$unpack(1:4) #> $a #> [1] 1 #>  #> $b_flat #> [1] 2 3 4 #>  #> $b #>      [,1] [,2] #> [1,]    2    3 #> [2,]    3    4 #>   # The processed elements are ignored on the return pack: p$pack(list(a = 1, b_flat = 2:4, b = matrix(c(2, 3, 3, 4), 2, 2))) #> [1] 1 2 3 4 p$pack(list(a = 1, b_flat = 2:4)) #> [1] 1 2 3 4  # R lacks scalars, which means that some packers will unpack # different inputs to the same outputs: p <- monty_packer(c(\"a\", \"b\")) p$unpack(1:2) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  p$unpack(cbind(1:2)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>   # This means that we can't reliably pack these inputs in a way # that guarantees round-tripping is possible.  We have chosen to # prioritise the case where a *single vector* is round-trippable: p$pack(list(a = 1, b = 2)) #> [1] 1 2  # This ambiguity goes away if unpacking matices with more than one # column: p$unpack(matrix(1:6, 2, 3)) #> $a #> [1] 1 3 5 #>  #> $b #> [1] 2 4 6 #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":null,"dir":"Reference","previous_headings":"","what":"Monty Random Number Generator — monty_rng","title":"Monty Random Number Generator — monty_rng","text":"Create object can used generate random numbers RNG monty uses internally.  primarily meant debugging testing underlying C++ rather source random numbers R.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monty Random Number Generator — monty_rng","text":"monty_rng object, can used drawn random numbers monty's distributions.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"running-multiple-streams-perhaps-in-parallel","dir":"Reference","previous_headings":"","what":"Running multiple streams, perhaps in parallel","title":"Monty Random Number Generator — monty_rng","text":"underlying random number generators designed work parallel, random access parameters (see vignette(\"rng\") details).  However, usually done within context running model particle sees stream numbers.  provide support running random number generators parallel, speed gains parallelisation likely somewhat eroded overhead copying around large number random numbers. random distribution functions support argument n_threads controls number threads used.  argument silently effect installation support OpenMP. Parallelisation performed level stream, draw n numbers stream total n * n_streams random numbers using n_threads threads . Setting n_threads higher n_streams therefore effect. running somebody else's system (e.g., HPC, CRAN) must respect various environment variables control maximum allowable number threads. exception random_real, random number distribution accepts parameters; interpretations depend n, n_streams rank. scalar use parameter value every draw every stream vector length n draw n random numbers per stream, every stream use parameter value every stream draw (different, shared, parameter value subsequent draws). matrix provided one row n_streams columns use different parameters stream, parameter draw. matrix provided n rows n_streams columns use parameter value [, j] ith draw jth stream. rules slightly different prob argument multinomial prob vector values. shift dimensions one: vector use prob every draw every stream length(prob) possible outcomes. matrix n columns vary draw (ith draw using vector prob[, ] shared across streams. nrow(prob) possible outcomes. 3d array provided 1 column n_streams \"layers\" (third dimension) use use different parameters stream, parameter draw. 3d array provided n columns n_streams \"layers\" vary draws streams use vector prob[, , j] ith draw jth stream. output differ based number threads used, number streams.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Monty Random Number Generator — monty_rng","text":"info Information generator (read-)","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Monty Random Number Generator — monty_rng","text":"monty_rng$new() monty_rng$size() monty_rng$jump() monty_rng$long_jump() monty_rng$random_real() monty_rng$random_normal() monty_rng$uniform() monty_rng$normal() monty_rng$binomial() monty_rng$nbinomial() monty_rng$hypergeometric() monty_rng$gamma_scale() monty_rng$gamma_rate() monty_rng$poisson() monty_rng$exponential_rate() monty_rng$exponential_mean() monty_rng$cauchy() monty_rng$multinomial() monty_rng$beta() monty_rng$state()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Monty Random Number Generator — monty_rng","text":"Create monty_rng object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$new(   seed = NULL,   n_streams = 1L,   real_type = \"double\",   deterministic = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"seed seed, integer, raw vector NULL. integer create suitable seed via \"splitmix64\" algorithm, raw vector must correct length (multiple either 32 16 float = FALSE float = TRUE respectively). NULL create seed using R's random number generator. n_streams number streams use (see Details) real_type type floating point number use. Currently float double supported (double default). (negligible) impact speed, exists test low-precision generators. deterministic Logical, indicating use \"deterministic\" mode distributions return expectations state never changed.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-size-","dir":"Reference","previous_headings":"","what":"Method size()","title":"Monty Random Number Generator — monty_rng","text":"Number streams available","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$size()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-jump-","dir":"Reference","previous_headings":"","what":"Method jump()","title":"Monty Random Number Generator — monty_rng","text":"jump function updates random number state stream advancing state equivalent 2^128 numbers drawn stream.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$jump()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-long-jump-","dir":"Reference","previous_headings":"","what":"Method long_jump()","title":"Monty Random Number Generator — monty_rng","text":"Longer $jump, $long_jump method equivalent 2^192 numbers drawn stream.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$long_jump()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-random-real-","dir":"Reference","previous_headings":"","what":"Method random_real()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers standard uniform distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$random_real(n, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-random-normal-","dir":"Reference","previous_headings":"","what":"Method random_normal()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers standard normal distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$random_normal(n, n_threads = 1L, algorithm = \"box_muller\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) n_threads Number threads use; see Details algorithm Name algorithm use; currently box_muller ziggurat supported, latter considerably faster.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-uniform-","dir":"Reference","previous_headings":"","what":"Method uniform()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers uniform distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$uniform(n, min, max, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) min minimum distribution (length 1 n) max maximum distribution (length 1 n) n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-normal-","dir":"Reference","previous_headings":"","what":"Method normal()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers normal distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$normal(n, mean, sd, n_threads = 1L, algorithm = \"box_muller\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) mean mean distribution (length 1 n) sd standard deviation distribution (length 1 n) n_threads Number threads use; see Details algorithm Name algorithm use; currently box_muller ziggurat supported, latter considerably faster.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-binomial-","dir":"Reference","previous_headings":"","what":"Method binomial()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers binomial distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$binomial(n, size, prob, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) size number trials (zero , length 1 n) prob probability success trial (0 1, length 1 n) n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-nbinomial-","dir":"Reference","previous_headings":"","what":"Method nbinomial()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers negative binomial distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$nbinomial(n, size, prob, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) size target number successful trials (zero , length 1 n) prob probability success trial (0 1, length 1 n) n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-hypergeometric-","dir":"Reference","previous_headings":"","what":"Method hypergeometric()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers hypergeometric distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$hypergeometric(n, n1, n2, k, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) n1 number white balls urn (called n R's rhyper) n2 number black balls urn (called m R's rhyper) k number balls draw n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-gamma-scale-","dir":"Reference","previous_headings":"","what":"Method gamma_scale()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers gamma distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$gamma_scale(n, shape, scale, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) shape Shape scale Scale ' n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-gamma-rate-","dir":"Reference","previous_headings":"","what":"Method gamma_rate()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers gamma distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$gamma_rate(n, shape, rate, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) shape Shape rate Rate ' n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-poisson-","dir":"Reference","previous_headings":"","what":"Method poisson()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers Poisson distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$poisson(n, lambda, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) lambda mean (zero , length 1 n). valid lambda <= 10^7 n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-exponential-rate-","dir":"Reference","previous_headings":"","what":"Method exponential_rate()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers exponential distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$exponential_rate(n, rate, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) rate rate exponential n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-exponential-mean-","dir":"Reference","previous_headings":"","what":"Method exponential_mean()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers exponential distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$exponential_mean(n, mean, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) mean mean exponential n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-cauchy-","dir":"Reference","previous_headings":"","what":"Method cauchy()","title":"Monty Random Number Generator — monty_rng","text":"Generate n draws Cauchy distribution.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$cauchy(n, location, scale, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) location location peak distribution (also median) scale scale parameter, specifies distribution's \"half-width half-maximum\" n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-multinomial-","dir":"Reference","previous_headings":"","what":"Method multinomial()","title":"Monty Random Number Generator — monty_rng","text":"Generate n draws multinomial distribution. contrast distributions , draw vector length prob.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$multinomial(n, size, prob, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n number samples draw (per stream) size number trials (zero , length 1 n) prob vector probabilities success trial. need sum 1 (though elements must non-negative), case interpret prob weights normalise equal 1 sampling. n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-beta-","dir":"Reference","previous_headings":"","what":"Method beta()","title":"Monty Random Number Generator — monty_rng","text":"Generate n numbers beta distribution","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$beta(n, a, b, n_threads = 1L)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monty Random Number Generator — monty_rng","text":"n Number samples draw (per stream) first shape parameter b second shape parameter n_threads Number threads use; see Details","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"method-state-","dir":"Reference","previous_headings":"","what":"Method state()","title":"Monty Random Number Generator — monty_rng","text":"Returns state random number stream. returns raw vector length 32 * n_streams. primarily intended debugging one (yet) initialise monty_rng object state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Monty Random Number Generator — monty_rng","text":"","code":"monty_rng$state()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monty Random Number Generator — monty_rng","text":"","code":"rng <- monty::monty_rng$new(42)  # Shorthand for Uniform(0, 1) rng$random_real(5) #> [1] 0.4969537 0.6896184 0.3669609 0.3620384 0.9299854  # Shorthand for Normal(0, 1) rng$random_normal(5) #> [1] -1.53271190 -1.41913805  0.02345789 -0.73297710 -1.23072552  # Uniform random numbers between min and max rng$uniform(5, -2, 6) #> [1] -0.07182473  4.28030151 -1.86883075  1.79198057  2.40249777  # Normally distributed random numbers with mean and sd rng$normal(5, 4, 2) #> [1] 5.100104 3.489436 4.315190 2.868816 4.235165  # Binomially distributed random numbers with size and prob rng$binomial(5, 10, 0.3) #> [1] 5 3 2 5 2  # Negative binomially distributed random numbers with size and prob rng$nbinomial(5, 10, 0.3) #> [1] 18 12 10 28 41  # Hypergeometric distributed random numbers with parameters n1, n2 and k rng$hypergeometric(5, 6, 10, 4) #> [1] 2 2 2 0 2  # Gamma distributed random numbers with parameters shape and scale rng$gamma_scale(5, 0.5, 2) #> [1] 0.1440913 0.5461841 0.8933152 2.0532643 0.2496346  # Gamma distributed random numbers with parameters shape and rate rng$gamma_rate(5, 0.5, 2) #> [1] 0.12141465 0.59654964 0.14313993 0.06523159 0.15478545  # Poisson distributed random numbers with mean lambda rng$poisson(5, 2) #> [1] 2 2 2 1 1  # Exponentially distributed random numbers with rate rng$exponential_rate(5, 2) #> [1] 0.4685057 0.2640733 1.6351242 0.1431109 0.9097181  # Exponentially distributed random numbers with mean rng$exponential_mean(5, 0.5) #> [1] 0.94255189 0.00123903 0.12241847 1.13068419 1.28631799  # Multinomial distributed random numbers with size and vector of # probabiltiies prob rng$multinomial(5, 10, c(0.1, 0.3, 0.5, 0.1)) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    1    2 #> [2,]    3    3    2    4    3 #> [3,]    5    5    7    4    4 #> [4,]    2    2    1    1    1"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_distributed.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of distributed seeds — monty_rng_distributed_state","title":"Create a set of distributed seeds — monty_rng_distributed_state","text":"Create set initial random number seeds suitable using within distributed context (multiple processes nodes) level higher single group synchronised threads.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_distributed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of distributed seeds — monty_rng_distributed_state","text":"","code":"monty_rng_distributed_state(   seed = NULL,   n_streams = 1L,   n_nodes = 1L,   algorithm = \"xoshiro256plus\" )  monty_rng_distributed_pointer(   seed = NULL,   n_streams = 1L,   n_nodes = 1L,   algorithm = \"xoshiro256plus\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_distributed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of distributed seeds — monty_rng_distributed_state","text":"seed Initial seed use. monty_rng, can NULL (create seed using R's generators), integer raw vector appropriate length. n_streams number streams create per node. n_nodes number separate seeds create. separated \"long jump\" generator. algorithm name algorithm use.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_distributed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of distributed seeds — monty_rng_distributed_state","text":"list either raw vectors (monty_rng_distributed_state) monty_rng_pointer objects (monty_rng_distributed_pointer)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_distributed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a set of distributed seeds — monty_rng_distributed_state","text":"See vignette(\"rng_distributed\") proper introduction functions.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_distributed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of distributed seeds — monty_rng_distributed_state","text":"","code":"monty::monty_rng_distributed_state(n_nodes = 2) #> [[1]] #>  [1] 85 65 3c 51 f9 83 8d ed b3 b5 a8 70 d3 52 db 15 42 4d e9 ff 8f bc 47 32 4d #> [26] 68 67 00 c5 d7 67 1b #>  #> [[2]] #>  [1] 42 e3 9e a6 31 8f 8b 0a 43 73 11 df 03 28 c0 bd b4 0d 31 d2 79 4e f3 9e 67 #> [26] 36 d6 9c 46 76 02 fd #>  monty::monty_rng_distributed_pointer(n_nodes = 2) #> [[1]] #> <monty_rng_pointer> #>   Public: #>     algorithm: xoshiro256plus #>     initialize: function (seed = NULL, n_streams = 1L, long_jump = 0L, algorithm = \"xoshiro256plus\")  #>     is_current: function ()  #>     n_streams: 1 #>     state: function ()  #>     sync: function ()  #>   Private: #>     is_current_: TRUE #>     ptr_: externalptr #>     state_: 8b 2b 74 9c 7c 3c b7 db 08 01 03 7a d0 a2 ef d7 00 c0 1c ... #>  #> [[2]] #> <monty_rng_pointer> #>   Public: #>     algorithm: xoshiro256plus #>     initialize: function (seed = NULL, n_streams = 1L, long_jump = 0L, algorithm = \"xoshiro256plus\")  #>     is_current: function ()  #>     n_streams: 1 #>     state: function ()  #>     sync: function ()  #>   Private: #>     is_current_: TRUE #>     ptr_: externalptr #>     state_: 54 29 8a 37 36 e8 86 3e 41 c5 3b 05 7d f9 2d e2 f6 20 e3 ... #>"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pointer to random number generator stream — monty_rng_pointer","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"function exists support use packages wish use monty's random number support, creates opaque pointer set random number streams.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"algorithm name generator algorithm used (read-) n_streams number streams random numbers provided (read-)","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"monty_rng_pointer$new() monty_rng_pointer$sync() monty_rng_pointer$state() monty_rng_pointer$is_current()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"Create new monty_rng_pointer object","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"","code":"monty_rng_pointer$new(   seed = NULL,   n_streams = 1L,   long_jump = 0L,   algorithm = \"xoshiro256plus\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"seed random number seed use (see monty_rng details) n_streams number independent random number streams create long_jump Optionally integer indicating many \"long jumps\" carried immediately creation. can used create distributed parallel random number generator (see monty_rng_distributed_state) algorithm random number algorithm use. default xoshiro256plus good general choice","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"method-sync-","dir":"Reference","previous_headings":"","what":"Method sync()","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"Synchronise R copy random number state. Typically needed serialisation ever used object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"","code":"monty_rng_pointer$sync()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"method-state-","dir":"Reference","previous_headings":"","what":"Method state()","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"Return raw vector state. can used create generators state.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"","code":"monty_rng_pointer$state()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"method-is-current-","dir":"Reference","previous_headings":"","what":"Method is_current()","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"Return logical, indicating random number state returned state() \"current\" (.e., copy held pointer) . TRUE creation immediately calling $sync() $state() FALSE use pointer.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"","code":"monty_rng_pointer$is_current()"},{"path":"https://mrc-ide.github.io/monty/reference/monty_rng_pointer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create pointer to random number generator stream — monty_rng_pointer","text":"","code":"monty::monty_rng_pointer$new() #> <monty_rng_pointer> #>   Public: #>     algorithm: xoshiro256plus #>     initialize: function (seed = NULL, n_streams = 1L, long_jump = 0L, algorithm = \"xoshiro256plus\")  #>     is_current: function ()  #>     n_streams: 1 #>     state: function ()  #>     sync: function ()  #>   Private: #>     is_current_: TRUE #>     ptr_: externalptr #>     state_: 4b d0 21 16 c4 5a 72 58 6b 64 74 31 1f 5b 7a a7 08 7e 43 ..."},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chains in parallel with callr — monty_runner_callr","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"Run MCMC chains parallel (time).  runner uses callr package distribute chains number worker processes machine.  used mcstate, \"worker\" processes.  Unless chains take seconds run, slower running default serial runner (monty_runner_serial), however long running chains, speedup typically scale workers added, long chains divide neatly workers.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"","code":"monty_runner_callr(n_workers, progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"n_workers number workers use.  larger number chains (though harmless) larger total number cores available computer.  Ideally number chains want run multiple number (example, 8 chains, 1, 2, 4, 8 good choices n_workers, 7 workers likely faster 4). progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  progress bar responds cli's options; particular cli.progress_show_after cli.progress_clear affect experience.  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_callr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chains in parallel with callr — monty_runner_callr","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chain in parallel — monty_runner_parallel","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"Run MCMC chains parallel (time).  runner uses parallel package distribute chains number worker processes machine.  Compared monty_runner_callr (Whch similar \"worker\" support mcstate version 1), simple.  particular report back information progress chain running worker even across chains.  also support warn number chains neatly divide number workers.  Mostly exists proof concept us think different interfaces.  Unless chains quite slow, parallel runner slower serial runner (monty_runner_serial) due overhead cost starting cluster.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"","code":"monty_runner_parallel(n_workers)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"n_workers Number workers create cluster .  multi-user setting careful set cores allowed use.  can use parallel::detectCores() get estimate number cores single user system (often overestimate returns number logical cores, including \"hyperthreading\"). Fewer cores used run fewer chains workers.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chain in parallel — monty_runner_parallel","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chain in series — monty_runner_serial","title":"Run MCMC chain in series — monty_runner_serial","text":"Run MCMC chains series (one another).  simplest chain runner, default used monty_sample(). nothing can configured (yet).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chain in series — monty_runner_serial","text":"","code":"monty_runner_serial(progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chain in series — monty_runner_serial","text":"progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  progress bar responds cli's options; particular cli.progress_show_after cli.progress_clear affect experience.  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_serial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chain in series — monty_runner_serial","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MCMC chains simultaneously — monty_runner_simultaneous","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"Run chains simultaneously.  differs monty_runner_parallel, runs chains individually parallel working models can evaluate multiple densities time.  situations might faster running parallel, primarily exists can see samplers can work multiple samples .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"","code":"monty_runner_simultaneous(progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  progress bar responds cli's options; particular cli.progress_show_after cli.progress_clear affect experience.  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"runner class monty_runner can passed monty_sample()","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_runner_simultaneous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run MCMC chains simultaneously — monty_runner_simultaneous","text":"","code":"m <- monty_example(\"banana\") s <- monty_sampler_random_walk(vcv = diag(2) * 0.01) r <- monty_runner_simultaneous() samples <- monty_sample(m, s, 200, runner = r)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from a model — monty_sample","title":"Sample from a model — monty_sample","text":"Sample model.  Uses Monte Carlo method (possibly something else future) generate samples distribution.  going change lot future, add support distributing workers, things like parallel reproducible streams random numbers.  now just runs single chain proof concept.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from a model — monty_sample","text":"","code":"monty_sample(   model,   sampler,   n_steps,   initial = NULL,   n_chains = 1L,   runner = NULL,   restartable = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from a model — monty_sample","text":"model model sample ; monty_model now, might change future test see things match interface rather particular class attribute. sampler sampler use.  described later, hope make reasonably easy implement can try different sampling ideas.  now, sampler implemented monty_sampler_random_walk(). n_steps number steps run sampler . initial Optionally, initial parameter values sampling.  given, sample model (prior). n_chains Number chains run.  default run single chain, likely want run . runner runner chains.  default option run chains series (via monty_runner_serial).  current option monty_runner_parallel uses parallel package run chains parallel.  run one chain argument best left alone. restartable Logical, indicating chains restartable.  add additional data chains object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from a model — monty_sample","text":"list parameters densities.  provide conversion formats used packages, notably posterior::as_draws_array, posterior::as_draws_df coda::.mcmc.list; please let us know need conversion something else.  want work directly output, elements list include: pars: array three dimensions representing (turn) parameter, sample chain, pars[, j, k] ith parameter jth sample kth chain.  rows named names parameters, model. density: matrix model log densities, n_steps rows n_chains columns. initial: record initial conditions, matrix many rows parameters n_chains columns (format matrix form initial input parameter) details: Additional details reported sampler; list length n_chains (NULL) details depend sampler.  one subject change. observations: Additional details reported model.  one also subject change.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from a model — monty_sample","text":"","code":"m <- monty_example(\"banana\") s <- monty_sampler_hmc(epsilon = 0.1, n_integration_steps = 10) samples <- monty_sample(m, s, 2000)  # Quick conversion of parameters into something plottable: pars <- t(drop(samples$pars)) plot(pars, pch = 19, cex = 0.75, col = \"#0000ff55\")   # If you have the posterior package you might prefer converting to # its format for performing diagnoses: res <- posterior::as_draws_df(samples) posterior::summarise_draws(res) #> # A tibble: 2 × 10 #>   variable   mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail #>   <chr>     <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl> #> 1 alpha     1.31   0.730  1.77  1.11 -0.468  5.04  1.01     89.2     73.8 #> 2 beta     -0.256 -0.214  1.11  1.13 -2.17   1.57  1.02     73.6     66.7  # At this point you could also use the 'bayesplot' package to plot # diagnostics."},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Continue sampling — monty_sample_continue","title":"Continue sampling — monty_sample_continue","text":"Continue (restart) chains started monty_sample.  Requires original chains run restartable = TRUE. Running chains way result final state exactly running total (original + continued) number steps single push.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continue sampling — monty_sample_continue","text":"","code":"monty_sample_continue(samples, n_steps, restartable = FALSE, runner = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continue sampling — monty_sample_continue","text":"samples monty_samples object created monty_sample() n_steps number new steps run restartable Logical, indicating chains restartable.  add additional data chains object. runner Optionally, runner chains.  default continue backend used start chains via monty_sample (previous restart function).  can use argument change runner, might useful transferring pilot run high-resource environment lower-resource environment.  given, must monty_runner object monty_runner_serial monty_runner_parallel.  can use argument change configuration runner, well type runner (e.g., changing number allocated cores).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continue sampling — monty_sample_continue","text":"list parameters densities","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up samples — monty_sample_manual_cleanup","title":"Clean up samples — monty_sample_manual_cleanup","text":"Clean manual sampling.  essentially safe version deleting directory (e.g, unlink(path, recursive = TRUE)) checks directory really used sampling contain anything else unexpected.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up samples — monty_sample_manual_cleanup","text":"","code":"monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up samples — monty_sample_manual_cleanup","text":"path path used call monty_sample_manual_prepare","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up samples — monty_sample_manual_cleanup","text":"Nothing, called side effects .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_cleanup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up samples — monty_sample_manual_cleanup","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae50a1917c ─────────────────── #> ℹ Created 2024-10-10 16:33:02 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae50a1917c ─────────────────── #> ℹ Created 2024-10-10 16:33:02 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect manually run samples — monty_sample_manual_collect","title":"Collect manually run samples — monty_sample_manual_collect","text":"Collect samples chains run monty_sample_manual_prepare monty_sample_manual_run.  chain completed, error.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect manually run samples — monty_sample_manual_collect","text":"","code":"monty_sample_manual_collect(path, samples = NULL, restartable = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect manually run samples — monty_sample_manual_collect","text":"path path used call monty_sample_manual_prepare samples Samples parent run.  need provide save_samples set anything \"value\" restartable Logical, indicating chains restartable.  add additional data chains object.  Note controlled chain collection creation.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect manually run samples — monty_sample_manual_collect","text":"monty_samples object.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_collect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect manually run samples — monty_sample_manual_collect","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae549bf926 ─────────────────── #> ℹ Created 2024-10-10 16:33:02 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae549bf926 ─────────────────── #> ℹ Created 2024-10-10 16:33:02 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about manually scheduled samples — monty_sample_manual_info","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"Get information status manually scheduled samples.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"","code":"monty_sample_manual_info(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"path path used call monty_sample_manual_prepare","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"Invisibly, logical vector, TRUE completed chains FALSE incomplete chains.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about manually scheduled samples — monty_sample_manual_info","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae6411d7cc ─────────────────── #> ℹ Created 2024-10-10 16:33:02 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae6411d7cc ─────────────────── #> ℹ Created 2024-10-10 16:33:02 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"Run MCMC, schedule execution chains .  Use want distribute chains (say) nodes HPC system.  arguments monty_sample, except runner argument missing looking .  using function, generally wanting run monty_sample_manual_run monty_sample_manual_collect.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"","code":"monty_sample_manual_prepare(   model,   sampler,   n_steps,   path,   initial = NULL,   n_chains = 1L )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"model model sample ; monty_model now, might change future test see things match interface rather particular class attribute. sampler sampler use.  described later, hope make reasonably easy implement can try different sampling ideas.  now, sampler implemented monty_sampler_random_walk(). n_steps number steps run sampler . path path write inputs outputs .  path directory yet exist, empty; create one .  contents directory managed monty names contents files implementation detail relied . Calling monty_sample_manual_cleanup() delete directory entirety.  aware use tempfile() (can reasonable choice!) path deleted R process ends, using process calling monty_sample_manual_prepare outlive running sampling. initial Optionally, initial parameter values sampling.  given, sample model (prior). n_chains Number chains run.  default run single chain, likely want run .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"Invisibly, path used store files (value path argument)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"contrast monty_sample runner argument , using function directly taking responsibility runner. ways running set chains monty, expected using monty_sample_manual_* result samples generated used monty_sample runner choice.","code":""},{"path":[]},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare to sample with manual scheduling — monty_sample_manual_prepare","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae505dbac8 ─────────────────── #> ℹ Created 2024-10-10 16:33:03 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae505dbac8 ─────────────────── #> ℹ Created 2024-10-10 16:33:03 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"Prepare continue sampling model, manual chain orchestration.  function monty_sample_continue monty_sample_manual_prepare monty_sample.  original set samples need run manually.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"","code":"monty_sample_manual_prepare_continue(   samples,   n_steps,   path,   save_samples = \"hash\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"samples monty_samples object created monty_sample() n_steps number steps run sampler . path path write inputs outputs .  path directory yet exist, empty; create one .  contents directory managed monty names contents files implementation detail relied . Calling monty_sample_manual_cleanup() delete directory entirety.  aware use tempfile() (can reasonable choice!) path deleted R process ends, using process calling monty_sample_manual_prepare outlive running sampling. save_samples Control saving samples inputs. choices hash (default) save hash validate monty_sample_manual_collect, value samples saved can omit samples  argument monty_sample_manual_collect, nothing, save nothing, just get right.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_prepare_continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare to continue sampling with manual scheduling — monty_sample_manual_prepare_continue","text":"Invisibly, path used store files (value path argument)","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run sample with manual scheduling — monty_sample_manual_run","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"Run chain prepared using monty_sample_manual_prepare.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"","code":"monty_sample_manual_run(chain_id, path, progress = NULL)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"chain_id id chain run, integer.  provide integer correspond chain 1 n_chains (n_chains argument passed monty_sample_manual_prepare error. path path used call monty_sample_manual_prepare progress Optional logical, indicating print progress bar running.  NULL, use value option monty.progress set, otherwise show progress bar (typically wanted).  progress bar responds cli's options; particular cli.progress_show_after cli.progress_clear affect experience.  Alternatively, can provide string indicating progress bar type.  Options fancy (equivalent TRUE), none (equivalent FALSE) simple (simple text-mode progress indicator designed play nicely logging; use special codes clear line).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"warning-","dir":"Reference","previous_headings":"","what":"Warning:","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"lock mechanism; can start single chain many times.  .","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sample_manual_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run sample with manual scheduling — monty_sample_manual_run","text":"","code":"model <- monty_example(\"banana\") sampler <- monty_sampler_random_walk(vcv = diag(2) * 0.05) path <- tempfile() monty_sample_manual_prepare(model, sampler, 100, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae53eb3217 ─────────────────── #> ℹ Created 2024-10-10 16:33:03 #> ℹ 100 steps x 1 chains #> ✖ No chains complete  # Run the (single) chain monty_sample_manual_run(1, path) monty_sample_manual_info(path) #>  #> ── Manual monty sampling at /tmp/RtmpzV01zg/file16ae53eb3217 ─────────────────── #> ℹ Created 2024-10-10 16:33:03 #> ℹ 100 steps x 1 chains #> ✔ All chains complete  # Collect the results monty_sample_manual_collect(path) #>  #> ── <monty_samples: 2 parameters x 100 samples x 1 chain> ─────────────────────── #> ℹ Parameters: 'alpha' and 'beta' #> ℹ Conversion to other types is possible: #> → ✔ posterior::as_draws_array() [package loaded] #> → ✔ posterior::as_draws_df() [package loaded] #> → ✔ coda::as.mcmc.list() [package loaded] #> ℹ See `?monty_sample()` and `vignette(\"samples\")` for more information  # Clean up samples monty_sample_manual_cleanup(path)"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"Create adaptive Metropolis-Hastings sampler, tune variance covariance matrix (vs simple random walk sampler monty_sampler_random_walk).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"","code":"monty_sampler_adaptive(   initial_vcv,   initial_vcv_weight = 1000,   initial_scaling = 1,   initial_scaling_weight = NULL,   min_scaling = 0,   scaling_increment = NULL,   log_scaling_update = TRUE,   acceptance_target = 0.234,   forget_rate = 0.2,   forget_end = Inf,   adapt_end = Inf,   pre_diminish = 0,   boundaries = \"reflect\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"initial_vcv initial variance covariance matrix; start using proposal, gradually become weighted towards empirical covariance matrix calculated chain. initial_vcv_weight Weight initial variance-covariance matrix used build proposal random-walk. Higher values translate higher confidence initial variance-covariance matrix means update additional samples slower. initial_scaling initial scaling variance covariance matrix used generate multivariate normal proposal random-walk Metropolis-Hastings algorithm. generate proposal matrix, weighted variance covariance matrix multiplied scaling parameter squared times 2.38^2 / n_pars (n_pars number fitted parameters). Thus, Gaussian target parameter space, optimal scaling around 1. initial_scaling_weight initial weight used scaling update. scaling weight increase first pre_diminish iterations, scaling weight increases adaptation scaling diminishes. NULL (default) value 5 / (acceptance_target * (1 - acceptance_target)). min_scaling minimum scaling variance covariance matrix used generate multivariate normal proposal random-walk Metropolis-Hastings algorithm. scaling_increment scaling increment added subtracted scaling factor variance-covariance adaptive step. NULL (default) optimal value calculated. log_scaling_update Logical, whether changes scaling parameter made log-scale. acceptance_target target fraction proposals accepted (optimally) adaptive part chain. forget_rate rate forgetting early parameter sets empirical variance-covariance matrix MCMC chains. example, forget_rate = 0.2 (default) means every 5th iterations remove earliest parameter set included, remove 1st parameter set 5th update, 2nd 10th update, . Setting forget_rate = 0 means early parameter sets never forgotten. forget_end final iteration early parameter sets can forgotten. Setting forget_rate = Inf (default) means forgetting mechanism continues throughout chains. Forgetting early parameter sets becomes less useful chains settled posterior mode, parameter might set estimate long take. adapt_end final iteration can adapt multivariate normal proposal. Thereafter empirical variance-covariance matrix, scaling weight remain fixed. allows adaptation switched certain point help ensure convergence chain. pre_diminish number updates adaptation scaling parameter starts diminish. Setting pre_diminish = 0 means diminishing adaptation scaling parameter offset, pre_diminish = Inf mean never diminishing adaptation. Diminishing adaptation help scaling parameter converge better, chains find location scale posterior mode might useful explore switched . boundaries Control behaviour proposals outside model domain.  supported options : \"reflect\" (default): reflect proposed parameters lie outside domain back domain (many times needed) \"reject\": evaluate density function, return -Inf density instead. \"ignore\": evaluate point anyway, even lies outside domain. initial point selected lie within domain, enforced monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"Efficient exploration parameter space MCMC might difficult target distribution high dimensionality, especially target probability distribution present high degree correlation.  Adaptive schemes used \"learn\" fly correlation structure updating proposal distribution recalculating empirical variance-covariance matrix rescale adaptive step MCMC. implementation adaptive MCMC algorithm based adaptation \"accelerated shaping\" algorithm Spencer (2021). algorithm based random-walk Metropolis-Hastings algorithm proposal multi-variate Normal distribution centred current point. Spencer SEF (2021) Accelerating adaptation adaptive Metropolis–Hastings random walk algorithm. Australian & New Zealand Journal Statistics 63:468-484.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_adaptive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adaptive Metropolis-Hastings Sampler — monty_sampler_adaptive","text":"","code":"m <- monty_example(\"gaussian\", matrix(c(1, 0.5, 0.5, 2), 2, 2)) vcv <- diag(2) * 0.1  # Sampling with a random walk s_rw <- monty_sampler_random_walk(vcv) res_rw <- monty_sample(m, s_rw, 1000)  s_adapt <- monty_sampler_adaptive(vcv) res_adapt <- monty_sample(m, s_adapt, 1000)  plot(drop(res_adapt$density), type = \"l\", col = 4) lines(drop(res_rw$density), type = \"l\", col = 2)   # Estimated vcv from the sampler at the end of the simulation s_adapt$details[[1]]$vcv #> NULL  coda::effectiveSize(coda::as.mcmc.list(res_rw)) #>        a        b  #> 16.77266 19.18234  coda::effectiveSize(coda::as.mcmc.list(res_adapt)) #>        a        b  #> 146.5451 129.8488"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create HMC — monty_sampler_hmc","title":"Create HMC — monty_sampler_hmc","text":"Create Hamiltonian Monte Carlo sampler, implemented using leapfrog algorithm.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create HMC — monty_sampler_hmc","text":"","code":"monty_sampler_hmc(   epsilon = 0.015,   n_integration_steps = 10,   vcv = NULL,   debug = FALSE )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create HMC — monty_sampler_hmc","text":"epsilon step size HMC steps n_integration_steps number HMC steps per step vcv variance-covariance matrix momentum vector. default uses identity matrix. debug Logical, indicating save intermediate points gradients.  add vector \"history\" details integration.  slow things though accumulate history inefficiently.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_hmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create HMC — monty_sampler_hmc","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_adaptive.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Adaptive Metropolis-Hastings Sampler — monty_sampler_nested_adaptive","title":"Nested Adaptive Metropolis-Hastings Sampler — monty_sampler_nested_adaptive","text":"Create nested adaptive Metropolis-Hastings sampler, extends adaptive sampler monty_sampler_adaptive, tuning variance covariance matrices proposal separable sections nested model (vs simple nested random walk sampler monty_sampler_random_walk). sampler requires models support has_parameter_groups property.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_adaptive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Adaptive Metropolis-Hastings Sampler — monty_sampler_nested_adaptive","text":"","code":"monty_sampler_nested_adaptive(   initial_vcv,   initial_vcv_weight = 1000,   initial_scaling = 1,   initial_scaling_weight = NULL,   min_scaling = 0,   scaling_increment = NULL,   log_scaling_update = TRUE,   acceptance_target = 0.234,   forget_rate = 0.2,   forget_end = Inf,   adapt_end = Inf,   pre_diminish = 0,   boundaries = \"reflect\" )"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_adaptive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Adaptive Metropolis-Hastings Sampler — monty_sampler_nested_adaptive","text":"initial_vcv initial variance covariance matrix; start using proposal, gradually become weighted towards empirical covariance matrix calculated chain. initial_vcv_weight Weight initial variance-covariance matrix used build proposal random-walk. Higher values translate higher confidence initial variance-covariance matrix means update additional samples slower. initial_scaling initial scaling variance covariance matrix used generate multivariate normal proposal random-walk Metropolis-Hastings algorithm. generate proposal matrix, weighted variance covariance matrix multiplied scaling parameter squared times 2.38^2 / n_pars (n_pars number fitted parameters). Thus, Gaussian target parameter space, optimal scaling around 1. initial_scaling_weight initial weight used scaling update. scaling weight increase first pre_diminish iterations, scaling weight increases adaptation scaling diminishes. NULL (default) value 5 / (acceptance_target * (1 - acceptance_target)). min_scaling minimum scaling variance covariance matrix used generate multivariate normal proposal random-walk Metropolis-Hastings algorithm. scaling_increment scaling increment added subtracted scaling factor variance-covariance adaptive step. NULL (default) optimal value calculated. log_scaling_update Logical, whether changes scaling parameter made log-scale. acceptance_target target fraction proposals accepted (optimally) adaptive part chain. forget_rate rate forgetting early parameter sets empirical variance-covariance matrix MCMC chains. example, forget_rate = 0.2 (default) means every 5th iterations remove earliest parameter set included, remove 1st parameter set 5th update, 2nd 10th update, . Setting forget_rate = 0 means early parameter sets never forgotten. forget_end final iteration early parameter sets can forgotten. Setting forget_rate = Inf (default) means forgetting mechanism continues throughout chains. Forgetting early parameter sets becomes less useful chains settled posterior mode, parameter might set estimate long take. adapt_end final iteration can adapt multivariate normal proposal. Thereafter empirical variance-covariance matrix, scaling weight remain fixed. allows adaptation switched certain point help ensure convergence chain. pre_diminish number updates adaptation scaling parameter starts diminish. Setting pre_diminish = 0 means diminishing adaptation scaling parameter offset, pre_diminish = Inf mean never diminishing adaptation. Diminishing adaptation help scaling parameter converge better, chains find location scale posterior mode might useful explore switched . boundaries Control behaviour proposals outside model domain.  supported options : \"reflect\" (default): reflect proposed parameters lie outside domain back domain (many times needed) \"reject\": evaluate density function, return -Inf density instead. \"ignore\": evaluate point anyway, even lies outside domain. initial point selected lie within domain, enforced monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_adaptive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Adaptive Metropolis-Hastings Sampler — monty_sampler_nested_adaptive","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_adaptive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nested Adaptive Metropolis-Hastings Sampler — monty_sampler_nested_adaptive","text":"Much like simple nested random walk sampler monty_sampler_random_walk, strategy propose shared parameters deviation current point parameter space single move accept reject block. generate points region-specific parameters, compute density accept reject updates independently.  possible change likelihood region independent region B. adaptive proposal algorithm non-nested adaptive sampler monty_sampler_adaptive extended adaptively tune variance covariance matrix parameter chunks.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Random Walk Sampler — monty_sampler_nested_random_walk","title":"Nested Random Walk Sampler — monty_sampler_nested_random_walk","text":"Create nested random walk sampler, uses symmetric proposal separable sections model move around parameter space.  sampler supports sampling models likelihood computable randomly (e.g., pmcmc), requires models support has_parameter_groups property.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Random Walk Sampler — monty_sampler_nested_random_walk","text":"","code":"monty_sampler_nested_random_walk(vcv, boundaries = \"reflect\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_random_walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Random Walk Sampler — monty_sampler_nested_random_walk","text":"vcv list variance covariance matrices.  expect list elements base groups corresponding covariance matrix base parameters () groups. boundaries Control behaviour proposals outside model domain.  supported options : \"reflect\" (default): reflect proposed parameters lie outside domain back domain (many times needed) \"reject\": evaluate density function, return -Inf density instead. \"ignore\": evaluate point anyway, even lies outside domain. initial point selected lie within domain, enforced monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Random Walk Sampler — monty_sampler_nested_random_walk","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_nested_random_walk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nested Random Walk Sampler — monty_sampler_nested_random_walk","text":"intended use case sampler models density can decomposed least partially chunks independent .  motivating example model COVID-19 transmission parameters region-specific (e.g., patterns rates contact individuals), parameters shared across regions (e.g., intrinsic properties disease incubation period). strategy propose shared parameters deviation current point parameter space single move accept reject block. generate points region-specific parameters, compute density accept reject updates independently.  possible change likelihood region independent region B. expect approach beneficial limited situations, beneficial likely result fairly large speed-ups: probably need three regions; number regions increases benefit independently accepting rejecting densities increases (1000 separate regions chains mix slowly example). model fairly computationally heavy density calculation completely dominates sampling process. access gradient information model; suspect HMC outperform approach margin already includes independence via gradients. can compute independent calculations parallel, help method reduce walk time.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Walk Sampler — monty_sampler_random_walk","title":"Random Walk Sampler — monty_sampler_random_walk","text":"Create simple random walk sampler, uses symmetric proposal move around parameter space.  sampler supports sampling models likelihood computable randomly (e.g., pmcmc).","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Walk Sampler — monty_sampler_random_walk","text":"","code":"monty_sampler_random_walk(vcv = NULL, boundaries = \"reflect\")"},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Walk Sampler — monty_sampler_random_walk","text":"vcv variance covariance matrix proposal. boundaries Control behaviour proposals outside model domain.  supported options : \"reflect\" (default): reflect proposed parameters lie outside domain back domain (many times needed) \"reject\": evaluate density function, return -Inf density instead. \"ignore\": evaluate point anyway, even lies outside domain. initial point selected lie within domain, enforced monty_sample.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/monty_sampler_random_walk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Walk Sampler — monty_sampler_random_walk","text":"monty_sampler object, can used monty_sample","code":""},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace random number calls — with_trace_random","title":"Trace random number calls — with_trace_random","text":"Trace calls R's random-number-generating functions, detect unexpected use random number generation outside monty's control.","code":""},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace random number calls — with_trace_random","text":"","code":"with_trace_random(code, max_calls = 5, show_stack = FALSE)"},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace random number calls — with_trace_random","text":"code Code run tracing max_calls Maximum number calls report.  default 5 show_stack Logical, indicating show stack point call","code":""},{"path":"https://mrc-ide.github.io/monty/reference/with_trace_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace random number calls — with_trace_random","text":"result evaluating code","code":""}]
